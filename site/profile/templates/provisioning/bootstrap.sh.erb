#! /bin/bash

############# configuration #################
MASTER=classroom.puppet.com
BINDIR=/opt/pltraining/bin
CONFDIR=/opt/pltraining/etc/puppet
VARDIR=/opt/pltraining/var/puppet

while getopts ":k:u:n:r:e:h" opt; do
  case $opt in
    k)
      KEY=$OPTARG
      NONINTERACTIVE=1
      ;;
    u)
      EMAIL=$OPTARG
      NONINTERACTIVE=1
      ;;
    n)
      NAME=$OPTARG
      NONINTERACTIVE=1
      ;;
    r)
      ROLE=$OPTARG
      ;;
    e)
      ENVIRONMENT=$OPTARG
      ;;
    h)
      echo "Options:"
      echo "  * Email address: -u <email address>"
      echo "  * Setup key:     -k <setup key>"
      echo "  * Machine name:  -n <unique name for machine>"
      echo "  * Environment:   -e <environment (default: production)>"
      echo "  * Machine role:  -r <training|proxy>"  # Add more roles here as we get them incorporated
      exit 1
      ;;
    \?)
      echo "Invalid option: -$OPTARG" >&2
      exit 1
      ;;
    :)
      echo "Option -$OPTARG requires an argument." >&2
      exit 1
      ;;
  esac
done

if [[ -v NONINTERACTIVE ]]; then
  if [[ ! -v EMAIL ]]; then echo "Specify your email address with -u <email>"; fi
  if [[ ! -v KEY   ]]; then echo "Specify the setup key with -k <key>";        fi

else
  echo
  echo -n "Enter the setup key: "
  read KEY

  echo -n "What is your Puppet or partner email address? "
  read EMAIL
fi

ARRAY=(${EMAIL//@/ })
DEFAULT="${ARRAY[0]}-$(date +%Y-%m-%d-%H%M)"

if [[ ! -v NONINTERACTIVE ]]; then
    echo -n "What would you like to call this node [${DEFAULT}]? "
    read NAME
    if [ "$NAME" == "" ]; then NAME=$DEFAULT; fi

    echo
    echo "Using the values:"
    echo "      Email: ${EMAIL}"
    echo "  Node Name: ${NAME}"
    echo "  Setup Key: ${KEY}"
    echo
    echo "Please Ctrl-C and run again if these are not the values you want or press [enter] to continue."
    read junk

elif [ "$NAME" == "" ]; then
    NAME=$DEFAULT
fi


# TODO: role selection as a menu:
#         * standard training VM
#         * Proxy VM
#         * learning VM
#       Maybe:
#         * bare VM w/o PE installed but all the other tools (for partners who demo the install)
#         * architect student VM (bare VM w/o installer)
#         * student VM? (hopefully we can drop this with the github/gitea workflow)
#         * other?
if [[ ! -v ROLE ]]; then
  ROLE='training'
fi


if [[ ! -v ENVIRONMENT ]]; then
  ENVIRONMENT='production'
fi


############# now start doing stuffs! #################
if [ -f /etc/redhat-release ]; then
  yum install -y rubygems ntpdate
  
  # work around https://tickets.puppetlabs.com/browse/FACT-1289 which was causing terrible facter hangs
  yum remove -y virt-what
elif [ -f /etc/debian_version ]; then
  echo "The Debian platform is support best-effort only."
  echo "       Press [enter] to continue."
  read junk
  apt-get install rubygems ntpdate 
else
  echo "Unknown platform... YOLO! You may need to install the"
  echo "following packages on your own for this to succeed."
  echo " * RubyGems"
  echo " * ntpdate"
  echo
  echo " Press [enter] to continue."
  read junk
fi

# Choose the proper certname/hostname based on the role selected
case $ROLE in
  training)
    CERTNAME='master.puppetlabs.vm'
    ;;
  proxy)
    CERTNAME='proxy.puppetlabs.vm'
    ;;
  *)
    echo "Role ${ROLE} is not supported."
    exit 1
    ;;
esac

# Modern Debian and RedHat/CentOS both use systemd.
hostnamectl set-hostname --static ${CERTNAME}
echo "127.0.0.1   localhost localhost.localdomain localhost4 localhost4.localdomain4 ${CERTNAME}" >  /etc/hosts
echo "::1         localhost localhost.localdomain localhost4 localhost4.localdomain4 ${CERTNAME}" >> /etc/hosts

# Do this first to ensure that SSL connections are valid later
ntpdate time.nist.gov

mkdir -p ${BINDIR}
gem install puppet --no-ri --no-rdoc --version <%= @puppetversion %> --bindir ${BINDIR}

mkdir -p ${CONFDIR}
echo "[main]" > ${CONFDIR}/puppet.conf
echo "  certname = ${NAME}.classroom.puppet.com" >> ${CONFDIR}/puppet.conf
echo "  server = ${MASTER}" >> ${CONFDIR}/puppet.conf
echo "  vardir = ${VARDIR}" >> ${CONFDIR}/puppet.conf

# This configures our trusted facts and the autosign password
echo "---" > ${CONFDIR}/csr_attributes.yaml
echo "custom_attributes:" >> ${CONFDIR}/csr_attributes.yaml
echo "  challengePassword: ${KEY}" >> ${CONFDIR}/csr_attributes.yaml
echo "extension_requests:" >> ${CONFDIR}/csr_attributes.yaml
echo "  pp_created_by: ${EMAIL}" >> ${CONFDIR}/csr_attributes.yaml
echo "  pp_role: ${ROLE}" >> ${CONFDIR}/csr_attributes.yaml
echo "  pp_environment: ${ENVIRONMENT}" >> ${CONFDIR}/csr_attributes.yaml

# duplicate so the PE install gets the trusted facts too. The new pltraining/classroom module uses them
mkdir -p /etc/puppetlabs/puppet
ln -s ${CONFDIR}/csr_attributes.yaml /etc/puppetlabs/puppet/csr_attributes.yaml

${BINDIR}/puppet agent -t --no-show_diff --confdir ${CONFDIR} --environment ${ENVIRONMENT}
if [ $? -ne 2 ]; then  # The run succeeded, and some resources were changed.
  echo "Something broke!"
  echo
  echo "Please examine any error messages above and report issues to the education department."
  echo "   Sometimes issues can be transient. You might try running the installer again."
  echo
  exit 1
fi

# since we probably changed the environment a bit
source ~/.bashrc

# run serverspec tests
classroom validate
if [ $? -ne 0 ]; then
  echo "System validation failed!"
  echo
  echo "Please report failed tests above to the education department."
  echo
  exit 2
fi

echo "All done!"
echo
echo "Classroom VMs are managed by the 'classroom' tool. Please run 'classroom --help' for usage information."
echo " * If you'd like to choose a root password, use 'classroom reset password'."
echo "   Otherwise a random password will be chosen for you and displayed on TTY login."
echo "   Note that you will always be able to log in using the 'training.pem' SSH key."
echo " * Log out and back in to ensure that your login environment is refreshed."
echo
classroom --help

# exit successfully so that Cloud Init doesn't barf
exit 0
